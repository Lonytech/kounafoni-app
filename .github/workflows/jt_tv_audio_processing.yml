name: Process ORTM News to audio summary

on:
  push:
    branches:
      - '**'
#on:
#  schedule:
#    # Set execution hour and minutes in UTC (a.k.a GMT)
#    - cron: '30 23 * * *'

jobs:
  process_audio:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository and code validity
      uses: actions/checkout@v4

    - name: Install ollama
      run: curl -fsSL https://ollama.com/install.sh | sh


    - name: Serve and pull ollama model
      run: |
        ollama serve &
        ollama pull llama3:8b-instruct-q4_0

    - name: Install poetry
      run: |
        sudo apt update -y
        sudo apt install -y pipx ffmpeg jq
        pipx install poetry==1.7.1
        export PATH="/root/.local/bin:$PATH"

    - name: Install dependencies with poetry
      run: poetry install --no-root --no-cache --only main,news_processing

    - name: Setup yt-dlp
      uses: AnimMouse/setup-yt-dlp@v1
      with:
        with-ffmpeg: true
        nightly: true

    - name: Setup yt-dlp-youtube-oauth2 plugin
      uses: AnimMouse/setup-yt-dlp/oauth2@v1
      with:
        token-data: ${{ secrets.YOUTUBE_OAUTH2_TOKEN_DATA }}

    # Get the last video in the playlist
    - name: Get the latest video id in the playlist
      id: get_video
      run: |
       # playlist url
       # PLAYLIST_URL="https://youtube.com/playlist?list=PLDBQmURq6pOfBKc6WU0wXTg2vxAjxjQel&si=n9iNX7AUi-SpNN_N"
       PLAYLIST_URL="https://youtube.com/playlist?list=PLK8Uo5BxRRzITbq80ipSQbH2aoiwE3C_9&si=RiG5-aeUgkfw4Ycs"
       
       # Search for the video with the specified upload date
       VIDEO_ID=$(yt-dlp --downloader aria2c --username oauth2 --password '' --flat-playlist -J "$PLAYLIST_URL" | jq -r '.entries[-1].id')
       if [ -z "$VIDEO_ID" ]; then
         echo "No video found in the playlist."
         exit 1
       fi
       
       # Save VIDEO_ID to environment file instead of using set-output
       echo "VIDEO_ID=$VIDEO_ID" >> $GITHUB_ENV

    # Download the audio in MP3 format
    - name: Download audio
      run: |
       VIDEO_ID="${{ steps.get_video.outputs.video_id }}"
       UPLOAD_DATE=$(date -d "(yt-dlp --username oauth2 --password '' --print upload_date "https://www.youtube.com/watch?v=${{ env.VIDEO_ID }}")" +"%Y-%m-%d")
       TITLE=$(yt-dlp --username oauth2 --password '' --simulate --print "%(title)s" "https://www.youtube.com/watch?v=${{ env.VIDEO_ID }}")
       echo $VIDEO_ID
       echo $UPLOAD_DATE
       echo $TITLE
       yt-dlp --downloader aria2c --username oauth2 --password '' -x --audio-format mp3 --audio-quality 192K "https://www.youtube.com/watch?v=${{ env.VIDEO_ID }}" -o "data/whisper/stt_audio/$UPLOAD_DATE/$TITLE.mp3"
    - run: ls -ll && ls -ll data/whisper/stt_audio

    - name: Make TTS, summarize and STT
      run: poetry run python src/ortm_jt_audio_updater.py
#
    - name: Google Cloud Auth
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Upload extracted texts from audio
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: 'data/whisper/stt_texts'
        destination: 'kounafonia-news/data'
        gzip: false # disable gzip compression on upload
        process_gcloudignore: false #no .gcloudignore file in the repo

    - name: Upload summarized texts from stt texts
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: 'data/whisper/summarized_texts'
        destination: 'kounafonia-news/data'
        gzip: false # disable gzip compression on upload
        process_gcloudignore: false #no .gcloudignore file in the repo